// Generated by CoffeeScript 1.7.1

/*
  This is the main script file. It can attach to the terminal
 */

(function() {
  var COMPLETE_URL, EVENT_TYPES, buildfunction, current_question, currentquestion, drawStatusMarker, err, f, logEvent, next, previous, progressIndicator, q, question, questionNumber, questions, results, staticDockerPs, statusMarker, _i, _len;

  COMPLETE_URL = "/whats-next/";


  /*
    Array of question objects
   */

  staticDockerPs = "ID                  IMAGE               COMMAND               CREATED             STATUS              PORTS";

  q = [];

  q.push({
    html: "<h3>Docker Engine parts</h3>\nThe Docker Engine consists of two parts: a daemon, a server process that\nmanages all the containers, and a client, which acts as a remote control\nfor the daemon.",
    assignment: "<h3>Assignment</h3>\nCheck which version of Docker is running. This will verify that the\ndaemon is running and that you can connect to it. If you can see the\nversion number you know you are all set.",
    tip: "Try typing <code>docker</code> to see the full list of accepted arguments. This emulator provides only a limited set of shell and Docker commands, so some commands may not work as expected.",
    command_expected: ['docker', 'version'],
    result: "Well done! Let's move to the next assignment."
  });

  q.push({
    html: "<h3>Searching for images</h3>\nThe easiest way to get started is to use a container image from someone else. Container images are\navailable on the Docker Hub Registry, a cloud-based collection of applications. You can find them online at\nDocker Hub as well through the Docker Engine client command line.",
    assignment: "<h3>Assignment</h3>\nUse the command line to search for an image called \"tutorial\". ",
    command_expected: ['docker', 'search', 'tutorial'],
    result: "You found it!",
    tip: "The format is <code>docker search &lt;string&gt;</code>"
  });

  q.push({
    html: "<h3>Downloading container images</h3>\nContainer images can be downloaded easily using <code>docker pull</code>.\nFor images in the Docker Hub Registry, the name you specify is constructed as &lt;username&gt;/&lt;repository&gt;.",
    assignment: "<h3>Assignment</h3>\nPlease download the tutorial image you have just found.",
    command_expected: ['docker', 'pull', 'learn/tutorial'],
    result: "Cool! You'll see that Docker has downloaded a number of layers.\nMost Docker images consist of several layers.",
    tip: "Don't forget to pull the full name of the repository, e.g., 'learn/tutorial'.\nLook under 'Show the answer' if you're stuck."
  });

  q.push({
    html: "<h3>Hello world</h3>\nYou can think of containers as a process in a box. The box contains everything the process might need, so\nit has the filesystem, system libraries, shell and such, but by default none of these are running.\nYou 'start' a container by running a process in it.",
    assignment: "<h3>Assignment</h3>\nRun the downloaded image and have it output \"hello world\".\nTo do so you should run 'echo' in the container and have that say \"hello world\".",
    command_expected: ["docker", "run", "learn/tutorial", "echo", "hello"],
    command_show: ["docker", "run", "learn/tutorial", 'echo "hello world"'],
    result: "Great! Hellooooo World! You have just started a container and executed a program inside of it, when\nthe program stopped, so did the container.",
    intermediateresults: [
      function() {
        return "You seem to be almost there. Did you give the command `echo \"hello world\"` ";
      }, function() {
        return "You've got the arguments right. Did you get the command? Try <em>/bin/bash </em>?";
      }
    ],
    tip: "The command <code>docker run</code> takes a minimum of two arguments: 1) an image name, and 2) the command you want to execute\nwithin that image."
  });

  q.push({
    html: "<h3>Installing things</h3>\nNext we are going to install a simple utility, ping, in the container. The image is based upon ubuntu, so you\ncan run the command <code>apt-get install -y ping</code> in the container. \nNote that even though the container stops right after a command completes, the changes are not forgotten.",
    assignment: "<h3>Assignment</h3>\nRun the downloaded image and have it output install 'ping' on top of the learn/tutorial image.",
    command_expected: ["docker", "run", "learn/tutorial", "apt-get", "install", "-y", "ping"],
    result: "That worked! You have installed a program on top of a base image. Your changes to the filesystem have been\nkept, but are not yet saved.",
    intermediateresults: [
      function() {
        return "Not specifying -y on the apt-get install command will work for ping, because it has no other dependencies, but\nit will fail when apt-get wants to install dependencies. To get into the habit, please add -y after apt-get.";
      }
    ],
    tip: "Don't forget to use -y for noninteractive mode installation."
  });

  q.push({
    html: "<h3>Save your changes</h3>\nAfter you make changes (by running a command inside a container), you probably want to save those changes.\nThis will enable you to start from this point later.\nWith Docker, the process of saving the state is called <em>committing</em>. Commit basically saves the difference\nbetween the old image and the new state.",
    assignment: "<h3>Assignment</h3>\nFirst use <code>docker ps -l</code> to find the ID of the container you created by installing ping.\nThen save (commit) this container with the repository name 'learn/ping'.",
    command_expected: ["docker", "commit", "698", "learn/ping"],
    command_show: ["docker", "commit", "698", 'learn/ping'],
    result: "That worked! Please take note that Docker has returned a new ID. This ID is the <em>image ID</em>.",
    intermediateresults: [
      function() {
        return "You have not specified the correct repository name to commit to (learn/ping). This works, but giving your images a name\nmakes them much easier to work with.";
      }
    ],
    tip: "Giving just <code>docker commit</code> will show you the possible arguments.\nYou will need to specify the container to commit by the ID you found\nYou don't need to copy (type) the entire ID. Three or four characters are usually enough."
  });

  q.push({
    html: "<h3>Run your new image</h3>\nYou have built a complete, self-contained image with the 'ping' utility installed. \nYour image can now run on any host that runs Docker.\nLet's try it now.",
    assignment: "<h3>Assignment</h3>\nRun the ping program to ping www.google.com.",
    command_expected: ["docker", "run", 'learn/ping', 'ping', 'google.com'],
    result: "That worked! Note that normally you can use Ctrl-C to disconnect. The container will keep running. This\ncontainer will disconnect automatically.",
    intermediateresults: [
      function() {
        return "You have not specified a repository name. This is not wrong, but giving your images a name\nmake them much easier to work with.";
      }
    ],
    tip: "Make sure to use the full image name, learn/ping, to run ping."
  });

  q.push({
    html: "<h3>Check your container</h3>\nYour image is now a running container.\nUsing <code>docker ps</code> we can see a list of all running containers, and using <code>docker inspect</code>.\nWe can see useful information about this container.",
    assignment: "<h3>Assignment</h3>\nFind the container ID of the running container, and then inspect the container using <code>docker inspect</code>.",
    command_expected: ["docker", "inspect", "efe"],
    result: "Success! Have a look at the output. You can see the ip-address, status and other information.",
    intermediateresults: [
      function() {
        return "You have not specified a repository name. This is not wrong, but giving your images a name\nmake them much easier to work with.";
      }
    ],
    tip: "Remember you can specify a container using the first three or four characters of its ID.",
    currentDockerPs: "ID                  IMAGE               COMMAND               CREATED             STATUS              PORTS\nefefdc74a1d5        learn/ping:latest   ping www.google.com   37 seconds ago      Up 36 seconds"
  });

  q.push({
    html: "<h3>Push your image to the Docker Hub Registry</h3>\nNow that you have verified that your image works, you can share it with others.\nRemember that you pulled (downloaded) the learn/tutorial image from the Registry?\nBy pushing (uploading) images that you build, you can easily retrieve them to use on other hosts as well as share them with other users. ",
    assignment: "<h3>Assignment</h3>\nPush your learn/ping image to the Registry.",
    command_expected: ["will_never_be_valid"],
    command_show: ["docker", "push", "learn/ping"],
    result: "",
    intermediateresults: [
      function() {
        var data;
        $('#assignment').hide();
        $('#tips, #command').hide();
        $('#instructions').html("<div class=\"complete\">\n  <h3>Congratulations!</h3>\n  You have mastered the basic Docker commands!         \n  <h3>Next Steps</h3>\n  <p>\n    <ol>\n      <li>Register for a free <a onclick=\"docker_sign_up();\" target=\"_blank\" href=\"https://hub.docker.com\">Docker Hub account</a>.</li>\n      <li><a onclick=\"docker_install();\" href=\"https://docs.docker.com/installation\" target=\"_blank\">Install Docker Engine</a> and try it for your own apps (opens in new window).</li>\n    </ol>\n  </p>\n</div>");
        data = {
          type: EVENT_TYPES.complete
        };
        mixpanel.track("interactive tutorial completed");
        logEvent(data);
        return "All done! You are now pushing a container image to the Registry.";
      }
    ],
    tip: "<code>docker images</code> will show you which images are currently on your host.\n<code>docker push</code> is the command to push images.\nThis emulator is logged in as user 'learn'. You can only push images to your own namespace.",
    finishedCallback: function() {
      webterm.clear();
      return webterm.echo(myTerminal());
    }
  });

  questions = [];


  /*
    Register the terminal
   */

  this.webterm = $('#terminal').terminal(interpreter, basesettings);

  EVENT_TYPES = {
    none: "none",
    start: "start",
    command: "command",
    next: "next",
    peek: "peek",
    feedback: "feedback",
    complete: "complete"
  };


  /*
    Sending events to the server
   */

  logEvent = function(data, feedback) {
    var ajax_load, callback, loadUrl;
    ajax_load = "loading......";
    loadUrl = "/tutorial/api/";
    if (!feedback) {
      callback = function(responseText) {
        return $("#ajax").html(responseText);
      };
    } else {
      callback = function(responseText) {
        results.set("Thank you for your feedback! We appreciate it!", true);
        $('#feedbackInput').val("");
        return $("#ajax").html(responseText);
      };
    }
    if (!data) {
      data = {
        type: EVENT_TYPES.none
      };
    }
    data.question = current_question;
    $("#ajax").html(ajax_load);
    return $.post(loadUrl, data, callback, "html");
  };


  /*
    Event handlers
   */

  $('#buttonNext').click(function(e) {
    this.setAttribute('disabled', 'disabled');
    console.log(e);
    next();
    mixpanel.track("interactive tutorial step " + current_question)
    ga('send', 'pageview', {
      'page': location.pathname + location.search + location.hash
    });
  });

  $('#buttonFinish').click(function() {
    return window.open(COMPLETE_URL);
  });

  $('#buttonPrevious').click(function() {
    previous();
    return $('#results').hide();
  });

  $('#leftside').bind('mousewheel', function(event, delta, deltaX, deltaY) {
    this.scrollTop += deltaY * -30;
    return event.preventDefault();
  });

  $('#feedbackSubmit').click(function() {
    var data, feedback;
    feedback = $('#feedbackInput').val();
    data = {
      type: EVENT_TYPES.feedback,
      feedback: feedback
    };
    return logEvent(data, feedback = true);
  });

  $('#fullSizeOpen').click(function() {
    return goFullScreen();
  });

  this.goFullScreen = function() {
    console.debug("going to fullsize mode");
    $('.togglesize').removeClass('startsize').addClass('fullsize');
    $('.hide-when-small').css({
      display: 'inherit'
    });
    $('.hide-when-full').css({
      display: 'none'
    });
    next(0);
    mixpanel.track("interactive tutorial started");
    webterm.resize();
    return setTimeout(function() {
      return logEvent({
        type: EVENT_TYPES.start
      });
    }, 3000);
  };

  $('#fullSizeClose').click(function() {
    return leaveFullSizeMode();
  });

  this.leaveFullSizeMode = function() {
    console.debug("leaving full-size mode");
    $('.togglesize').removeClass('fullsize').addClass('startsize');
    $('.hide-when-small').css({
      display: 'none'
    });
    $('.hide-when-full').css({
      display: 'inherit'
    });
    return webterm.resize();
  };

  this.docker_sign_up = function() {
      mixpanel.track("interactive tutorial sign-up");
  };

  this.docker_install = function() {
      mixpanel.track("interactive tutorial install docker")
  };

  $('#command').click(function() {
    var data;
    if (!$('#commandHiddenText').hasClass('hidden')) {
      $('#commandHiddenText').addClass("hidden").hide();
      $('#commandShownText').hide().removeClass("hidden").fadeIn();
    }
    data = {
      type: EVENT_TYPES.peek
    };
    return logEvent(data);
  });


  /*
    Navigation amongst the questions
   */

  current_question = 0;

  next = function(which) {
    var data;
    $('#marker-' + current_question).addClass("complete").removeClass("active");
    if (!which && which !== 0) {
      current_question++;
    } else {
      current_question = which;
    }
    questions[current_question]();
    results.clear();
    this.webterm.focus();
    if (!$('#commandShownText').hasClass('hidden')) {
      $('#commandShownText').addClass("hidden");
      $('#commandHiddenText').removeClass("hidden").show();
    }
    history.pushState({}, "", "#" + current_question);
    data = {
      'type': EVENT_TYPES.next
    };
    logEvent(data);
    $('#marker-' + current_question).removeClass("complete").addClass("active");
    $('#step-no').text(current_question);
    $('#assignment').show();
    $('#tips, #command').show();
  };

  previous = function() {
    current_question--;
    questions[current_question]();
    results.clear();
    this.webterm.focus();
  };

  results = {
    set: function(htmlText, intermediate) {
      if (intermediate) {
        console.debug("intermediate text received");
        $('#results').addClass('intermediate');
        $('#buttonNext').hide();
      } else {
        $('#buttonNext').show();
      }
      return window.setTimeout((function() {
        $('#resulttext').html(htmlText);
        $('#results').fadeIn();
        return $('#buttonNext').removeAttr('disabled');
      }), 300);
    },
    clear: function() {
      $('#resulttext').html("");
      return $('#results').fadeOut('slow');
    }
  };


  /*
    Transform question objects into functions
   */

  buildfunction = function(q) {
    var _q;
    _q = q;
    return function() {
      console.debug("function called");
      $('#instructions').hide().fadeIn();
      $('#instructions').html(_q.html);
      $('#assignment').html(_q.assignment);
      $('#tipShownText').html(_q.tip);
      if (_q.command_show) {
        $('#commandShownText').html(_q.command_show.join(' '));
      } else {
        $('#commandShownText').html(_q.command_expected.join(' '));
      }
      if (_q.currentDockerPs != null) {
        window.currentDockerPs = _q.currentDockerPs;
      } else {
        window.currentDockerPs = staticDockerPs;
      }
      if (_q.finishedCallback != null) {
        window.finishedCallback = q.finishedCallback;
      } else {
        window.finishedCallback = function() {
          return "";
        };
      }
      window.immediateCallback = function(input, stop) {
        var data, doNotExecute;
        if (stop === true) {
          doNotExecute = true;
        } else {
          doNotExecute = false;
        }
        if (doNotExecute !== true) {
          console.log(input);
          data = {
            'type': EVENT_TYPES.command,
            'command': input.join(' '),
            'result': 'fail'
          };
          if (input.containsAllOfTheseParts(_q.command_expected)) {
            data.result = 'success';
            setTimeout((function() {
              this.webterm.disable();
              return $('#buttonNext').focus();
            }), 1000);
            results.set(_q.result);
            console.debug("contains match");
          } else {
            console.debug("wrong command received");
          }
          logEvent(data);
        }
      };
      window.intermediateResults = function(input) {
        var intermediate;
        if (_q.intermediateresults) {
          return results.set(_q.intermediateresults[input](), intermediate = true);
        }
      };
    };
  };

  statusMarker = $('#progress-marker-0');

  progressIndicator = $('#progress-indicator');

  drawStatusMarker = function(i) {
    var marker;
    if (i === 0) {
      marker = statusMarker;
    } else {
      marker = statusMarker.clone();
      marker.appendTo(progressIndicator);
    }
    marker.attr("id", "marker-" + i);
    marker.text(i);
    return marker.click(function() {
      return next(i);
    });
  };

  questionNumber = 0;

  for (_i = 0, _len = q.length; _i < _len; _i++) {
    question = q[_i];
    f = buildfunction(question);
    questions.push(f);
    drawStatusMarker(questionNumber);
    questionNumber++;
  }


  /*
    Initialization of program
   */

  if (window.location.hash) {
    try {
      currentquestion = window.location.hash.split('#')[1].toNumber();
      next(currentquestion);
    } catch (_error) {
      err = _error;
      questions[0]();
    }
  } else {
    questions[0]();
  }

  $('#results').hide();

}).call(this);
